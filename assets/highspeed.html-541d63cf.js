import{_ as e,p as i,q as a,J as l}from"./framework-4a7f5a2b.js";const r={},h=l('<h1 id="spaの特徴" tabindex="-1"><a class="header-anchor" href="#spaの特徴" aria-hidden="true">#</a> SPAの特徴</h1><h2 id="待ち時間ゼロのデータ検索" tabindex="-1"><a class="header-anchor" href="#待ち時間ゼロのデータ検索" aria-hidden="true">#</a> 待ち時間ゼロのデータ検索</h2><ul><li>データベース検索で、見かけ上の待ち時間をゼロにできる手法がある。 <ul><li>無限スクロール</li><li>予測ダウンロード</li></ul></li><li>モダンWebでは、ユーザー操作より前にデータを準備することが可能。</li></ul><p>仕様書通り動作すればよかったバックエンド開発と比べ、フロンドエンド開発は、ユーザー目線で、ストレスを感じさせないことが必要。例えば、検索条件を絞ったとき、検索結果件数をリアルタイムで表示するため、データベースに検索条件と件数のデータが事前用意する。記事一覧を表示するとき、まず文字情報を先にダウンロードし、バックグラウンド通信でが画像などのほかの情報をダウンロードする。</p><h2 id="画面復元" tabindex="-1"><a class="header-anchor" href="#画面復元" aria-hidden="true">#</a> 画面復元</h2><ul><li>画面の表示と入力途中のデータのどちらも復元できる。</li><li>バラメータ付きURLによる画面復元は、Amazonでも導入されている。</li><li>PC間でもネットワーク経由で画面復元が可能。</li></ul><h2 id="オフライン化" tabindex="-1"><a class="header-anchor" href="#オフライン化" aria-hidden="true">#</a> オフライン化</h2><ul><li>フロントエンドにWebサーバーと同等機能を作ることでオフライン対応が可能。</li><li>Webサーバーと同等機能はWebブラウザの組み込み機能「ServiceWorker」を使う。</li><li>ページの閲覧だけでなく、Webサイトへの送信もオフライン対応可能。</li></ul><p>フロントエンドにWebサーバーと同じ機能を作り、そこにアクセスする。 遅延ダウンロード データ容量の制限上、重要なページのみダウンロードする。 オフラインの時はオフライン用のメニューを表示して、表示できるページのみ選択可能にすれば、エラーを回避できる。 フロントエンドにWebサーバーを作るには、Webブラウザーに内蔵されている<strong>ServiceWorker</strong>という機能を利用する。</p>',9),t=[h];function d(n,s){return i(),a("div",null,t)}const o=e(r,[["render",d],["__file","highspeed.html.vue"]]);export{o as default};
