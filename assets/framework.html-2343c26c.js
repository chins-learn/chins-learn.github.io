import{_ as i,p as n,q as o,s as e,G as r,t as l,J as a,n as h}from"./framework-4a7f5a2b.js";const d={},s=a('<h1 id="アプリケーションフレームワーク" tabindex="-1"><a class="header-anchor" href="#アプリケーションフレームワーク" aria-hidden="true">#</a> アプリケーションフレームワーク</h1><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要" aria-hidden="true">#</a> 概要</h2><p>フレームワークの学習について、2つの壁を順に越える必要があります。</p><ol><li>未知のが概念の理解</li><li>未経験の記述方法の学習</li></ol><p>フレームワーク共通の主な概念</p><table><thead><tr><th>概念</th><th>説明</th></tr></thead><tbody><tr><td>仮想DOM</td><td>ページ単位で画面を一括操作する仕組み</td></tr><tr><td>データバインド</td><td>HTML要素に対する値の取得や設定を簡単に行う機能</td></tr><tr><td>コンポーネント</td><td>画面を分割して開発するための部品</td></tr><tr><td>状態管理ライブラリ</td><td>アプリ全体のコンポーネントを連携させるライブラリ</td></tr><tr><td>ルーター</td><td>仮想のURLで画面切り替えを行う仕組み</td></tr><tr><td>ビルド</td><td>Webサーバーで利用できるファイル群を出力する一連の処理</td></tr></tbody></table><p>各フレームワークは独自の記述方法があります。これらの記述はJavaScriptのコードに変換後、実行されます。</p><ul><li>React<br> avaScriptの中にXMLを埋め込む「JSX（JavaScript XML）形式」</li><li>Angular<br> クラス定義、HTML（拡張構文）、CSSをファイルで分離し、クラスからHTMLとCSSをインポートして利用する「Componentクラス形式」</li><li>Vue<br> JavaScript、HTML（拡張構文）、CSSを1つのファイルにまとめた「SFC（Single File Component）形式」</li></ul><h3 id="仮想dom" tabindex="-1"><a class="header-anchor" href="#仮想dom" aria-hidden="true">#</a> 仮想DOM</h3><p>ページ単位で画面を一括操作する仕組みです。</p><p>仮想DOMは、そのJavaScriptコードとブラウザAPIの間に入り、DOM操作の複雑さを軽減し、処理を高速化します。仮想DOM自身もオブジェクト構造を持ち、その状態はDOMと同期するので、開発者は仮想DOMを意識するだけで済みます。</p><p>メリッド</p><ul><li>HTML構造やイベント処理を簡単に記述できる。</li><li>HTML要素に対する値の取得や設定が簡単にできる（データバインド）。</li><li>仮想DOMで変更のあった差分のみをDOMに反映するので表示速度が向上する。</li></ul><h3 id="コンポーネント" tabindex="-1"><a class="header-anchor" href="#コンポーネント" aria-hidden="true">#</a> コンポーネント</h3><p>フレームワークを使った画面の作成では、画面を部品に分割して開発できます。この部品を「コンポーネント」と呼びます。</p><p>コンポーネントはJavaScriptコード、CSS、HTML（拡張構文）をセットにしたもので、部品として独立動作が可能です。</p><p>コンポーネントは画面を分割できるだけでなく、コンポーネントないにコンポーネントを配置する入れ子構造（親子構造）が可能です。この機能を利用すれば、複雑な画面レイアウトを単純な機能のコンポーネントからくみ上げることが可能になります。入れ子構造のコンポーネントでは、内包する側を「親コンポーネント」、内包された側を「子コンポーネント」と呼ぶことができます。 同じ親コンポーネントに内包されるコンポーネントを「兄弟コンポーネント」、子コンポーネントのさらに子コンポーネントを「孫コンポーネント」と呼ぶこともあります。</p><p>メリッド</p><ul><li>開発が容易<br> 分割により対象範囲が狭くなり、コード量の減少、複雑さの低減ができます。</li><li>開発期間の短縮<br> 1つの画面作成を複数人で分担可能で、かつ各人の作業は独立しているので、完成までの時間を短縮できます。</li><li>複雑なレイアウト、機能の実現<br> 1つのコンポーネントが、画面全体を実装するのと同等の機能を持ちますので、例えばリスト表示の1行にページ全体と同等程度複雑なレイアウト、機能の実装が容易になります。</li><li>開発効率の向上<br> 蓄積した部品を再利用することで、重複した作業を削減できます。</li></ul><h3 id="状態管理ライブラリ" tabindex="-1"><a class="header-anchor" href="#状態管理ライブラリ" aria-hidden="true">#</a> 状態管理ライブラリ</h3><p><strong>状態管理ライブラリ</strong>は、アプリ全体のコンポーネントを連携させ、コンポーネント事の状態データの整合性を取ります。状態データは、コンポーネントの表示に必要なパラメータであり、表示の変化に応じて値が変わります。</p><p>親子関係にあるコンポーネントの状態データを、親コンポーネントがまとめて管理すれば連携の複雑さは軽減されますが、限界があります。そこで利用するのが、「状態管理ライブラリ」です。アプリ全体のコンポーネントの状態データを1箇所で管理することでコンポーネント間のスムーズな連携を実現します。</p><p>通知を受ける側のコンポーネントは、状態管理ライブラリに対し必要なデータのみ通知してもらう登録を行い、無駄な通知を回避します。また、状態管理ライブラリは、同一ページ内のコンポーネント間の連携以外にも、ページ間のデータ共有、サーバーからのデータ変更通知などのデータも扱います。</p>',23),c=e("br",null,null,-1),p={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},u=e("br",null,null,-1),_={href:"https://ngrx.io/",target:"_blank",rel:"noopener noreferrer"},b=e("br",null,null,-1),g={href:"https://vuex.vuejs.org/ja/",target:"_blank",rel:"noopener noreferrer"},f=a('<h3 id="ルーター" tabindex="-1"><a class="header-anchor" href="#ルーター" aria-hidden="true">#</a> ルーター</h3><p>ルーターが必要になる背景は、モダンWebではページ切り替えの時、JavaScriptのコードがページごと仮想DOMを書き替えて再描画します。従来型Webのように、ページ切り替えのたびにURLにアクセスするわけではあります。そのため、モダンWebではWebブラウザのURL表示が変化しません。</p><p>どのページも同じURLの場合のデメリット</p><ol><li>ブックマークが利用できない</li><li>SNSでリンクのシェアができない</li><li>ページ間をURLリンクで移動できない</li><li>どのページを表示していても、リロードを行うと1ページ目に戻る</li></ol><p>これを解決するのが「ルーター」です。ルーターは、URLにページごとの仮想のパスを定義し、それに基づくページの切り替えを可能にする機能です。</p><h3 id="ビルド" tabindex="-1"><a class="header-anchor" href="#ビルド" aria-hidden="true">#</a> ビルド</h3><p>「ビルド」は、フレームワークを使った開発において、ソースコードと関連ファイルを加工して、Webサーバーで利用できるファイル群を出力する一連の処理です。フレームワークでは1つの画面をコンポーネントに分割したり、独自の構文を利用したりするため、従来型Webでは必要なかったファイルの結合や変換が必要になります。ビルドでは以下のような処理を行います。</p><ol><li><p>対象ファイルの読み込み</p><ul><li>JavaScript、TypeScriptソースコード</li><li>フレームワーク独自の仮想DOM向け記述コード</li><li>依存ファイルの読み込み</li></ul></li><li><p>加工</p><ul><li>フレームワーク独自の仮想DOM向け記述コードをJavaScriptコードへ変換</li><li>TypeScriptのコードをJavaScriptコードへコンパイル</li><li>JavaScriptのコードを指定したECMAScriptのバージョンへ変換</li></ul></li><li><p>最適化（Productionビルドのみ）</p><ul><li>不要コードの削除</li><li>コードのサイズ縮小と難読化</li></ul></li><li><p>出力</p><ul><li>実行用ファイルの生成</li><li>公開用の静的ファイル（favicon.icoなど）のコピー</li><li>テンプレートからindex.htmlを生成</li><li>デバッグ用のmapファイル生成</li></ul></li></ol><h2 id="フレームワークごとの特徴" tabindex="-1"><a class="header-anchor" href="#フレームワークごとの特徴" aria-hidden="true">#</a> フレームワークごとの特徴</h2><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3>',10),v={href:"https://ja.reactjs.org/",target:"_blank",rel:"noopener noreferrer"},S=a('<ol><li>生いたち<br> Facebookサイトにおいて、フロントエンド開発の複雑さを軽減するために2013年リリースされました。</li><li>設計方針<br> 複雑さの回避が優先されています。最小限のコア機能のみパッケージ化することで、フレームワーク本体のメンテナンス作業の軽減し、バージョンアップの容易さを実現しています。</li><li>機能<br> 仮想DOMとコンポーネント機能のみ提供しています。これらコア機能のみの提供のため、公式サイトでは自分自身をフレームワークではなく、ライブラリと呼んでいます。不足する機能は、開発者が自由に選択します。</li><li>補足<br> コア機能のみですので、従来型Webの一部に取り込むこともできます。モダンWeb開発には、ルーターや状態管理、通信機能などのライブラリの追加が必要です。</li></ol><h3 id="angular" tabindex="-1"><a class="header-anchor" href="#angular" aria-hidden="true">#</a> Angular</h3>',2),x={href:"https://angular.io/",target:"_blank",rel:"noopener noreferrer"},M=a('<ol><li>生いたち<br> Googleが主導するシングルページアプリケーション向けフレームワーク「AngularJS」を再設計して、2016年にリリースされました。</li><li>設計方針<br> シングルページアプリケーションに必要な機能を、一括して提供することを目指しています。Reactとは全く逆の方針です。</li><li>機能<br> シングルページアプリケーションに必要な機能に加え、オフライン対応のための機能やMaterial UIライブラリの組込みまで提供されています。開発ツールも統合されています。</li><li>補足<br> フレームワークを直訳すると「枠組」です。その名の通り、Angular開発チームが考えるベストプラクティスに準拠して、コードを作成するようになっています。これは自由なコード作成とは対極にありますので、開発エンジニアによって好みが分かれます。</li></ol><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h3>',2),m={href:"https://v3.ja.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},j=e("li",null,[r("生いたち"),e("br"),r(" Evan You（個人）が開発をはじめ、現在は多くのスポンサー企業が参加しています。開発の動機は、「Angularの本当に好きだった部分を抽出して、余分な概念なしに本当に軽いものを作る」。")],-1),L=e("li",null,[r("設計方針"),e("br"),r(" Reactのように最小限のコア機能のみパッケージ化していますが、追加可能な専用ライブラリも準備されています。そのため、「段階的な機能拡張」を謳っています。")],-1),k=e("br",null,null,-1),D=e("br",null,null,-1),O=e("br",null,null,-1),R={href:"https://github.com/vuejs/vue#user-content-ecosystem",target:"_blank",rel:"noopener noreferrer"},J=e("li",null,[r("補足"),e("br"),r(" フレームワークを直訳すると「枠組」です。その名の通り、Angular開発チームが考えるベストプラクティスに準拠して、コードを作成するようになっています。これは自由なコード作成とは対極にありますので、開発エンジニアによって好みが分かれます。")],-1),A=e("br",null,null,-1),T={href:"https://jp.vuejs.org/v2/guide/comparison.html",target:"_blank",rel:"noopener noreferrer"};function C(V,W){const t=h("ExternalLinkIcon");return n(),o("div",null,[s,e("ul",null,[e("li",null,[r("Redux公式サイト（React用）"),c,e("a",p,[r("https://redux.js.org/"),l(t)])]),e("li",null,[r("NgRx公式サイト（Angular用）"),u,e("a",_,[r("https://ngrx.io/"),l(t)])]),e("li",null,[r("Vuex公式サイト（Vue用）"),b,e("a",g,[r("https://vuex.vuejs.org/ja/"),l(t)])])]),f,e("p",null,[r("React公式サイト "),e("a",v,[r("https://ja.reactjs.org/"),l(t)])]),S,e("p",null,[r("Angular公式サイト "),e("a",x,[r("https://angular.io/"),l(t)])]),M,e("p",null,[r("Vue公式サイト "),e("a",m,[r("https://v3.ja.vuejs.org/"),l(t)])]),e("ol",null,[j,L,e("li",null,[r("機能"),k,r(" 仮想DOMとコンポーネント機能のみ提供しています。ただし、追加可能なルーターや状態管理ライブラリなども準備されています。"),D,r(" 追加可能ライブラリ一覧"),O,e("a",R,[r("https://github.com/vuejs/vue#user-content-ecosystem"),l(t)])]),J]),e("p",null,[r("フレームワークの比較記事"),A,e("a",T,[r("https://jp.vuejs.org/v2/guide/comparison.html"),l(t)])])])}const U=i(d,[["render",C],["__file","framework.html.vue"]]);export{U as default};
